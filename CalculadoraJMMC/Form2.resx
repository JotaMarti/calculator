<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTxtBoxGeneral.Text" xml:space="preserve">
    <value>Welcome to the Calculator Help section.

In here you can check how to operate the calculator.

This help is divided in two sections, "Basic" and "Adavance". 
Each section represent a mode for the calculator.

To change between modes just click the "View" button.

- "Basic" is for the "Standard" mode of the calculator, 
   in here you will do the common math operations
   like addition or subtraction.

- "Advance" is for the "Scientific" mode of the calculator,
   in here you will do advance math operations like
   powers and negations.</value>
  </data>
  <data name="RichTextBoxBasics.Text" xml:space="preserve">
    <value>Welcome to the basic operations help section!

When in Standard mode, you can do the following operations:

- Addition: The symbol for addition is "+", to do an addition 
  first enter a number with the number buttons, then click 
  the addition button ("+"), after this, enter a new number with 
  the buttons again. Lastly, you can click the equals sign("=") 
  to check the result or you can click the addition button again 
  to concatenate the addition with another operation.

- Subtraction: The symbol for subtraction is "-", to do a
   subtraction first enter a number with the number buttons,
   then click the subtraction button ("-"), after this, enter a new
   number with the buttons again. Lastly, you can click the
   equals sign ("=") to check the result or you can click the 
   subtraction button again to concatenate the subtraction
   with another operation.

- Multiplication: The symbol for multiplication is "*", to do a
   multiplication first enter a number with the number buttons,
   then click the multiplication button ("*"), after this, enter a new
   number with the buttons again. Lastly, you can click the
   equals sign ("=") to check the result or you can click the 
   multiplication button again to concatenate the multiplication
   with another operation.

- Division: The symbol for division is "/", to do a
   division first enter a number with the number buttons,
   then click the division button ("/"), after this, enter a new
   number with the buttons again. Lastly, you can click the
   equals sign ("=") to check the result or you can click the 
   division button again to concatenate the division
   with another operation.

- Percentage: With this operator you can calcultate several
   percentages of a number but it's a little tricky to use.
   because you need to have in mind the different basic
   operators. Usage with each operator:

	- Addition operator: First click a number
	   for example 150, then click the addition
	   number. After this, enter a number for
	   example 21 and then click the percentage
	   operator. In the screen will appear 181,5.
	   That's the result to sum 150 plus is 21%.

	- Subtraction operator: First click a number
	   for example 150, then click the subtraction
	   button. After this, enter a number for example
	   21 and then click the percentage operator. In
	   the screen will appear 118,5. That's the result to
	   substract to 150 his 21% (31,5).

	- Multiplication operator: First click a number
	   for example 150, then click the multiplication
	   button. After this enter a new number, for example
	   21 and then click the percentage operator. In
	   the screen will appear 31,5. Thats the 21% 
	   of the number 150.

- Reverse: Enter a number with the number buttons,
   the if you click thids button ("1/x") it will divive 1
   between the number that you have entered.</value>
  </data>
  <data name="RichTextBoxAdvance.Text" xml:space="preserve">
    <value>Welcome to the advance help!

In the "Scientific" mode you will see a couple of new icons,
don't worry! three of them are pretty much the same thing.

- Elevate a number to a power: In this mode you will see
   three new buttons with a "x" and different numbers
   on top of them. This new buttons are meant to elevate
   a number to a certain power. A power is to multiply
   a number for his self a number of times. For example,
   if you enter the number 5 and the click on "x²" you will
   see in the screen the number 25 that is the result of
   multiply 5 * 5. So if you understand this the other ones
   are really easy!. With the "x³" button you will multiply
   a number with his self three times, and with the "xʸ"
   button you can enter a custom number, for example
   you can enter a 50 and you will multply the number
   for his self 50 times!.

- Factorial: With the n! button you can calculate the factorial
   of a given number, just enter a number and click the "n!" 
   button. The factorial is the product of all positive numbers
   less than or equal of the number given.</value>
  </data>
</root>